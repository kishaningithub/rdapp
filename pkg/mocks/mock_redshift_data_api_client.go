// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kishaningithub/rdapp/pkg (interfaces: RedshiftDataApiClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	redshiftdata "github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	gomock "github.com/golang/mock/gomock"
)

// MockRedshiftDataApiClient is a mock of RedshiftDataApiClient interface.
type MockRedshiftDataApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedshiftDataApiClientMockRecorder
}

// MockRedshiftDataApiClientMockRecorder is the mock recorder for MockRedshiftDataApiClient.
type MockRedshiftDataApiClientMockRecorder struct {
	mock *MockRedshiftDataApiClient
}

// NewMockRedshiftDataApiClient creates a new mock instance.
func NewMockRedshiftDataApiClient(ctrl *gomock.Controller) *MockRedshiftDataApiClient {
	mock := &MockRedshiftDataApiClient{ctrl: ctrl}
	mock.recorder = &MockRedshiftDataApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedshiftDataApiClient) EXPECT() *MockRedshiftDataApiClientMockRecorder {
	return m.recorder
}

// DescribeStatement mocks base method.
func (m *MockRedshiftDataApiClient) DescribeStatement(arg0 context.Context, arg1 *redshiftdata.DescribeStatementInput, arg2 ...func(*redshiftdata.Options)) (*redshiftdata.DescribeStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStatement", varargs...)
	ret0, _ := ret[0].(*redshiftdata.DescribeStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStatement indicates an expected call of DescribeStatement.
func (mr *MockRedshiftDataApiClientMockRecorder) DescribeStatement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStatement", reflect.TypeOf((*MockRedshiftDataApiClient)(nil).DescribeStatement), varargs...)
}

// ExecuteStatement mocks base method.
func (m *MockRedshiftDataApiClient) ExecuteStatement(arg0 context.Context, arg1 *redshiftdata.ExecuteStatementInput, arg2 ...func(*redshiftdata.Options)) (*redshiftdata.ExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteStatement", varargs...)
	ret0, _ := ret[0].(*redshiftdata.ExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatement indicates an expected call of ExecuteStatement.
func (mr *MockRedshiftDataApiClientMockRecorder) ExecuteStatement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatement", reflect.TypeOf((*MockRedshiftDataApiClient)(nil).ExecuteStatement), varargs...)
}

// GetStatementResult mocks base method.
func (m *MockRedshiftDataApiClient) GetStatementResult(arg0 context.Context, arg1 *redshiftdata.GetStatementResultInput, arg2 ...func(*redshiftdata.Options)) (*redshiftdata.GetStatementResultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatementResult", varargs...)
	ret0, _ := ret[0].(*redshiftdata.GetStatementResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResult indicates an expected call of GetStatementResult.
func (mr *MockRedshiftDataApiClientMockRecorder) GetStatementResult(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResult", reflect.TypeOf((*MockRedshiftDataApiClient)(nil).GetStatementResult), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kishaningithub/rdapp/pkg (interfaces: RedshiftServerlessClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	redshiftserverless "github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	gomock "github.com/golang/mock/gomock"
)

// MockRedshiftServerlessClient is a mock of RedshiftServerlessClient interface.
type MockRedshiftServerlessClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedshiftServerlessClientMockRecorder
}

// MockRedshiftServerlessClientMockRecorder is the mock recorder for MockRedshiftServerlessClient.
type MockRedshiftServerlessClientMockRecorder struct {
	mock *MockRedshiftServerlessClient
}

// NewMockRedshiftServerlessClient creates a new mock instance.
func NewMockRedshiftServerlessClient(ctrl *gomock.Controller) *MockRedshiftServerlessClient {
	mock := &MockRedshiftServerlessClient{ctrl: ctrl}
	mock.recorder = &MockRedshiftServerlessClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedshiftServerlessClient) EXPECT() *MockRedshiftServerlessClientMockRecorder {
	return m.recorder
}

// ListNamespaces mocks base method.
func (m *MockRedshiftServerlessClient) ListNamespaces(arg0 context.Context, arg1 *redshiftserverless.ListNamespacesInput, arg2 ...func(*redshiftserverless.Options)) (*redshiftserverless.ListNamespacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespaces", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockRedshiftServerlessClientMockRecorder) ListNamespaces(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockRedshiftServerlessClient)(nil).ListNamespaces), varargs...)
}

// ListWorkgroups mocks base method.
func (m *MockRedshiftServerlessClient) ListWorkgroups(arg0 context.Context, arg1 *redshiftserverless.ListWorkgroupsInput, arg2 ...func(*redshiftserverless.Options)) (*redshiftserverless.ListWorkgroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkgroups", varargs...)
	ret0, _ := ret[0].(*redshiftserverless.ListWorkgroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkgroups indicates an expected call of ListWorkgroups.
func (mr *MockRedshiftServerlessClientMockRecorder) ListWorkgroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkgroups", reflect.TypeOf((*MockRedshiftServerlessClient)(nil).ListWorkgroups), varargs...)
}
